{"version":3,"sources":["components/feedbackOptions/FeedbackOptions.js","components/statistic/Statistic.js","components/section/Section.js","components/notification/Notification.js","components/App.js","index.js"],"names":["FeedbackOptions","feedbackOptions","onClick","name","type","Statistic","good","neutral","bad","total","positivePercentage","Section","title","children","Notification","message","App","state","getTotal","getPercentage","Math","round","handlerFeedbackCount","event","buttonName","target","setState","this","Component","ReactDOM","render","document","getElementById"],"mappings":"+NAuBeA,EApBS,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,gBACzB,OACE,oCACE,4BAAQC,QAASD,EAAiBE,KAAK,OAAOC,KAAK,UAAnD,QAGA,4BAAQF,QAASD,EAAiBE,KAAK,UAAUC,KAAK,UAAtD,WAGA,4BAAQF,QAASD,EAAiBE,KAAK,MAAMC,KAAK,UAAlD,SCWSC,EApBG,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC9C,OACE,oCACE,oCAAUJ,GACV,uCAAaC,GACb,mCAASC,GACT,qCAAWC,GACX,iDAAuBC,EAAvB,QCOSC,EAdC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxB,OACE,iCACE,4BAAKD,GACJC,ICIQC,EARM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAO,2BAAIA,ICkDEC,E,4MA/CbC,MAAQ,CACNX,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPU,SAAW,WAAO,IAAD,EACgB,EAAKD,MACpC,OAFe,EACPX,KADO,EACDC,QADC,EACQC,K,EAIzBW,cAAgB,WACd,OAAOC,KAAKC,MAAO,EAAKJ,MAAMX,KAAO,EAAKY,WAAc,M,EAG1DI,qBAAuB,SAAAC,GACrB,IAAMC,EAAaD,EAAME,OAAOtB,KAChC,EAAKuB,SAAL,eACGF,EAAa,EAAKP,MAAMO,GAAc,K,uDAIjC,IAAD,EACwBG,KAAKV,MAA5BX,EADD,EACCA,KAAMC,EADP,EACOA,QAASC,EADhB,EACgBA,IACvB,OACE,oCACE,kBAAC,EAAD,CAASI,MAAM,0BACb,kBAAC,EAAD,CAAiBX,gBAAiB0B,KAAKL,wBAEzC,kBAAC,EAAD,CAASV,MAAM,mBACQ,IAApBe,KAAKT,WACJ,kBAAC,EAAD,CACEZ,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOkB,KAAKT,WACZR,mBAAoBiB,KAAKR,kBAG3B,kBAAC,EAAD,CAAcJ,QAAQ,4B,GAxChBa,aCDlBC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,U","file":"static/js/main.0da02475.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst FeedbackOptions = ({ feedbackOptions }) => {\n  return (\n    <>\n      <button onClick={feedbackOptions} name=\"good\" type=\"button\">\n        Good\n      </button>\n      <button onClick={feedbackOptions} name=\"neutral\" type=\"button\">\n        Neutral\n      </button>\n      <button onClick={feedbackOptions} name=\"bad\" type=\"button\">\n        Bad\n      </button>\n    </>\n  );\n};\n\nFeedbackOptions.propTypes = {\n  feedbackOptions: PropTypes.func\n};\n\nexport default FeedbackOptions;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Statistic = ({ good, neutral, bad, total, positivePercentage }) => {\n  return (\n    <>\n      <p>Good: {good}</p>\n      <p>Neutral: {neutral}</p>\n      <p>Bad: {bad}</p>\n      <p>Total: {total}</p>\n      <p>Positive feedback: {positivePercentage} %</p>\n    </>\n  );\n};\n\nStatistic.propTypes = {\n  good: PropTypes.number,\n  neutral: PropTypes.number,\n  bad: PropTypes.number,\n  total: PropTypes.number,\n  positivePercentage: PropTypes.number\n};\n\nexport default Statistic;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Section = ({ title, children }) => {\n  return (\n    <section>\n      <h2>{title}</h2>\n      {children}\n    </section>\n  );\n};\n\nSection.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.object\n};\n\nexport default Section;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Notification = ({ message }) => {\n  return <p>{message}</p>;\n};\n\nNotification.propTypes = {\n  message: PropTypes.string\n};\n\nexport default Notification;\n","import React, { Component } from \"react\";\nimport FeedbackOptions from \"./feedbackOptions/FeedbackOptions\";\nimport Statistics from \"./statistic/Statistic\";\nimport Section from \"./section/Section\";\nimport Notification from \"./notification/Notification\";\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0\n  };\n\n  getTotal = () => {\n    const { good, neutral, bad } = this.state;\n    return good + neutral + bad;\n  };\n\n  getPercentage = () => {\n    return Math.round((this.state.good / this.getTotal()) * 100);\n  };\n\n  handlerFeedbackCount = event => {\n    const buttonName = event.target.name;\n    this.setState({\n      [buttonName]: this.state[buttonName] + 1\n    });\n  };\n\n  render() {\n    const { good, neutral, bad } = this.state;\n    return (\n      <>\n        <Section title=\"Please, leave feedback\">\n          <FeedbackOptions feedbackOptions={this.handlerFeedbackCount} />\n        </Section>\n        <Section title=\"StÐ°tistics\">\n          {this.getTotal() !== 0 ? (\n            <Statistics\n              good={good}\n              neutral={neutral}\n              bad={bad}\n              total={this.getTotal()}\n              positivePercentage={this.getPercentage()}\n            />\n          ) : (\n            <Notification message=\"No feedback given\" />\n          )}\n        </Section>\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}